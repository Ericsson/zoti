module: main
version: '0.1.0'
description: Source for 'proj1' test project
top: main
# import:
#   - {module: genspec_leafs, as: Synthed}
# defaults:
#   instance:
#     bind:
#       label_to_label:
#         usage: "(p) -> {{ label[p].name }}"
---

block:
- name: main
  type: {module: Generic, name: Infinite}
  prototype: ["name", "int $name(void) {\n {{placeholder['code']}} \n}"]
  label:
  - {name: input, usage: ["p", "{{ label.$p.name }}"]}
  - {name: output, usage: ["p", "{{ label.$p.name }}"]}
  param:
    schedule: ["readio", "exec", "writeio"]
    myformat: "\"%d\"" # TEST
  instance:
  - placeholder: readio
    block: {module: Generic.IO, name: ReadArray}
    directive: ["expand"]
    bind:
    - value_to_param: {value: "\"%d\"", child: format}
    - label_to_label: {parent: input, child: arg, usage: ["p", "{{ label.$p.name }}"]}
  - placeholder: writeio
    block: {module: Generic.IO, name: PrintArray}
    directive: ["expand"]
    bind:
    - param_to_param: {child: format, parent: myformat}
    - label_to_label: {child: arg, parent: output, usage: ["p", "{{ label.$p.name }}"]}
  - placeholder: exec
    block: {module: main, name: mav_1}
    directive: ["expand"]
    bind: 
    - label_to_label: {child: in1, parent: input, usage: ["p", "{{ label.$p.name }}"]}
    - label_to_label: {child: out1, parent: output, usage: ["p", "{{ label.$p.name }}"]}

- name: mav_1
  type: {module: Skeleton.Compute, name: ShiftFarm}
  label:
  - {name: in1,    usage: ["p", "{{ label.$p.name }}"]}
  - {name: out1,   usage: ["p", "{{ label.$p.name }}"]}
  - {name: COEF,   usage: ["p", "{{ label.$p.name }}"]}
  - {name: _it,    usage: ["p", "{{ label.$p.name }}"]} 
  - {name: _range, usage: ["p", "{{ label.$p.name }}"]}
  param:
    iterate_over: [in1]
  instance:
  - placeholder: f
    block: {module: main, name: fred_1}
    directive: ["expand"]
    bind:
    - label_to_label:
        {parent: in1, child: in1, usage: ["p", "{{ label.$p.name }}+{{label._it.name}}"]}
    - label_to_label: {child: in2, parent: COEF, usage: ["p", "{{ label.$p.name }}"]}
    - label_to_label: {child: size1, parent: _range, usage: ["p", "{{ label.$p.name }}"]}
    - label_to_label:
        {parent: out1, child: out1, usage: ["p", "{{ label.$p.name }}[{{label._it.name}}]"]}

- name: fred_1
  type: {module: Skeleton.Compute, name: FarmRed_Acc}
  label:
  - {name: in1,   usage: ["p", "{{ label.$p.name }}"]}
  - {name: in2,   usage: ["p", "{{ label.$p.name }}"]}
  - {name: size1, usage: ["p", "{{ label.$p.name }}"]}
  - {name: out1,  usage: ["p", "{{ label.$p.name }}"]}
  - {name: _acc,  usage: ["p", "{{ label.$p.name }}"]}
  - {name: _it,   usage: ["p", "{{ label.$p.name }}"]}
  param:
    iterate_over:
      size1: { range: "name"}
      in2:
  instance:
  - placeholder: f
    block: {module: genspec_leafs, name: mulacc}
    # directive: ["expand"]
    usage: [name, i1, i2, acc, o, "$name({{label.$i1.name}}, {{label.$i2.name}}, {{label.$acc.name}}, {{label.$o.name}})"]
    bind:
    - label_to_label:
        parent: in1
        child: in1
        usage: ["p", "({{ label.$p.name }})[{{label._it.name}}]"]
    - label_to_label:
        parent: in2
        child: in2
        usage: ["p", "{{ label.$p.name }}[{{label._it.name}}]"]
    - label_to_label: {child: acc, parent: _acc, usage: ["p", "{{ label.$p.name }}"]}
    - label_to_label: {child: out, parent: _acc, usage: ["p", "{{ label.$p.name }}"]}
