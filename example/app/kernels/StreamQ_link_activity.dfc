/* Note:
   We would like the framework to be able to put the data directly into the
   proper buffer instead of through an intermediate buffer as is done now.
   How can that be accomplished? Important aspect because this framework is
   about short-cutting data paths. */

Common__StreamId_t id = {{getter("ldata.id")}};
uint16_t length = {{getter("ldata.data.LEN")}};
int16_t blk_nr;
int i;

/* Hack: We do init this way for now. Should be something separate. */
if ( {{getter("block.start", "0")}} == -2)
  for (int i=0; i < {{getter("block.start.LEN")}}; ++i)
    {{ setter("block.start", "i", "-1") }};
    /* StreamQ_block_start[i] = -1; */

if (id >= {{getter("block.start.LEN")}}) {
  {{ setter("reports.id", "0") }};
  {{ setter("reports.pending", "0") }};
  return;
 }

blk_nr = {{label.block.name}}_alloc(id, {{getter("stored_data.LEN", "0")}});
if (blk_nr < 0) {
  {{ setter("reports.id", "0") }};
  {{ setter("reports.pending", "0") }};
  return;
 }

#ifdef DFL_DEBUG_PRINT
printf("<#compute#>(link_data): id=%d, blk_nr=%d\n", id, blk_nr);
union {
  float f;
  uint32_t i;
} t;
printf("data:\n");
for (int i = 0; i < length && i < 10; ++i) {
  t.i = {{getter("ldata.data.a", "i")}};
  printf("%f ", t.f);
 }
printf("\n");
for (int i = 0; i < length && i < 10; ++i) {
  t.i = {{getter("ldata.data.b", "i")}};
  printf("%f ", t.f);
 }
printf("\n");
for (int i = 0; i < length && i < 10; ++i) {
  t.i = {{getter("ldata.data.c", "i")}};
  printf("%f ", t.f);
 }
printf("\n");
#endif

/* data_t * data_p = StreamQ_stored_data[id][blk_nr]; */
for (i = 0; i < length; ++i) {
  /* Note:
     The following shows a limitation in the FW<->C interface. We cannot use
     memcpy to copy data because we cannot assume any specific impl of the
     port access. */
  /* data_p[i].a = ldata#data[i].a; */
  /* data_p[i].b = ldata#data[i].b; */
  /* data_p[i].c = ldata#data[i].c; */
  {{setter("stored_data.a", "id", "blk_nr", "i", getter("ldata.data.a", "i"))}};
  {{setter("stored_data.b", "id", "blk_nr", "i", getter("ldata.data.b", "i"))}};
  {{setter("stored_data.c", "id", "blk_nr", "i", getter("ldata.data.c", "i"))}};
 }

{{setter("stored_length", "id", "blk_nr", "length")}};
uint32_t* tot_len = &{{getter("total_length", "id")}};
uint16_t* blk_cnt = &{{getter("block_cnt", "id")}};
tot_len += length;
blk_cnt += 1;

{{setter("reports.id", "id")}};
{{setter("reports.pending", getter("block_cnt", "id"))}};
/* <#put#>(reports#id, id); */
/* <#put#>(reports#pending, StreamQ_block_cnt[id]); */

