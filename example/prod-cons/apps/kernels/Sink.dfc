// <#begin#>(Sink_data)

#define EPSILON (0.002)

union {
  float f;
  uint32_t i;
} t;
int predef_cnt = {{ getter("predef_data.data.LEN") }};

#ifdef DFL_DEBUG_PRINT
printf("Sink_data compute called\n");
#endif

uint16_t length = {{ getter("data.length") }};
#ifdef DFL_DEBUG_PRINT
printf("  length=%"PRIu16"\n", length);
#endif

if (! {{label.inited.name}}) {
  for (int i = 0; i < predef_cnt; ++i) {
    t.f = ((float)i)+ 0.1335f; {{ setter("predef_data.data", "i", "t.i") }};
  }
  {{label.inited.name}} = true;
 }

#ifdef DFL_DEBUG_PRINT
printf("r: ");
for (int i = 0; i < length && i < 10; ++i) {
  t.i = {{ getter("data.data", "i") }};
  printf("%f ", t.f);
 }
printf("\n");
#endif

if (length != predef_cnt) {
  printf("Mismatched length, length=%d, predef_cnt=%d\n", length, predef_cnt);
 } else {
  for (int i = 0; i < length; ++i) {
    t.i = {{ getter("predef_data.data", "i") }};
    float expected = t.f;
    t.i = {{ getter("data.data", "i") }};

    if (t.f < (expected - EPSILON) ||
	t.f > (expected + EPSILON)) {
      printf("Mismatched data, got=%f, expected=%f(+/-%f)\n",
	     t.f, expected, EPSILON);
    }
  }
 }

++{{label.packet_count.name}};
{{label.data_count.name}} += length * 3 * sizeof(uint32_t);

/* not needed? */
/* <#put#>(done#, true); */
// <#end#>(Sink_data)

/* =============================================  */

// <#begin#>(Sink_stat)
#define NSECS_IN_SEC 1000000000

uint64_t secs = {{ getter("stat_time.seconds") }};
uint32_t nsecs = {{ getter("stat_time.nanosecs") }};
uint64_t now = secs * NSECS_IN_SEC + nsecs;

if ({{label.last_time.name}} > 0) {
  double period = (double)(now - {{label.last_time.name}}) / NSECS_IN_SEC;

  uint64_t pkt_cnt_in_period = {{label.packet_count.name}} - {{label.last_packet_count.name}};
  double rate = pkt_cnt_in_period / period;

  printf("rate (pkt/s): %f\n", rate);
 }

{{label.last_time.name}} = now;
{{label.last_packet_count.name}} = {{label.packet_count.name}};
{{label.last_data_count.name}} = {{label.data_count.name}};

/* not needed? */
/* <#put#>(done#, true); */
// <#end#>(Sink_stat)
