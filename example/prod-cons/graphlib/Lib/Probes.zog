module: Lib.Probes
import:
- {module: Lib.Utils, as: Util}
---

nodes:
- name: CounterProbe
  parameters:
    probe-name: null
  ports:
  - name: DFL_counter_flush
    dir: in
    port_type: {type: socket}
    data_type: {name: Common.Boolean}
  - name: DFL_counter_samples
    dir: out
    port_type: {type: socket}
    data_type: {name: Monitor.Collection64, value: "0"}
  - {name: monitored_input, dir: in}
  - {name: bypassed_data, dir: out}
  nodes:
  - !attach
    name: packet-cnt
    ref: !ref {module: Util, path: "/nodes[SingleKernelActor]"}
    parameters:
      external-function: !include
        file: probes_c.dfc
        begin: "// v counter_inject"
        end: "// ^ counter_inject"
      passed-mark: {"inline": true}
      passed-ports:
        - {name: monitored, dir: in} 
        - {name: cnt_buff, dir: inout} 
        # - {name: out, dir: out}
  - !attach
    ref: !ref {module: Util, path: "/nodes[SingleKernelActor]"}
    name: buffer-flush
    parameters:
      external-function: !include 
        file: probes_c.dfc
        begin: "// v flush_one_buffer"
        end: "// ^ flush_one_buffer"
      passed-mark: {"inline": true}
      passed-ports:
        - {name: DFL_counter_flush, dir: in}
        - {name: cnt_stat, dir: out}
        - name: cnt_buff
          dir: inout
          mark:
            probe_buffer:
              !attach {ref: !ref {path: "../../../../../parameters/probe-name"}}
          port_type: {type: assign}
          data_type: {name: Monitor.Sample64, value: "{ (DFL_ATOM_INVALID_BIT | 0), 0 }"}
  edges:
  - connect: [".", "monitored_input", "packet-cnt/_kern", "monitored"]
  - connect: [".", "DFL_counter_flush", "buffer-flush/_kern", "DFL_counter_flush"]
  - connect: ["buffer-flush/_kern", "cnt_stat", ".", "DFL_counter_samples"]
  - {connect: ["packet-cnt/_kern", "cnt_buff", "buffer-flush/_kern", "cnt_buff"], kind: storage}
  - connect: [".", "monitored_input", ".", "bypassed_data"]

##########################################
    
- name: CounterStat
  description: "CounterStat"
  kind: PlatformNode
  target: {platform: unix-process, language: C}
  mark: {init_atom_table: True}
  parameters:
    flush_ports: []
  ports:
    - name: flush
      dir: in
      data_type: {name: Common.Boolean}
      port_type: {external_name: DFL-flush}
    - name: samples
      dir: in
      data_type: {name: Monitor.Collection64}
    # TODO: needs outputs defined by the caller
  # primitives:
  #   - {name: null0, type: "NULL"}
  #   - {name: null1, type: "NULL"}
  nodes:
    - name: Flush
      kind: ActorNode
      nodes:
        - name: flush
          kind: KernelNode
          mark:
            inline: true
          extern: !include 
            file: probes_c.dfc
            begin: "// v send_flush_n"
            end: "// ^ send_flush_n"
          ports: !attach
            ref: !ref {path: "../../../parameters/flush_ports"}
            concat:
            - {name: flush, dir: in}
          parameters: !attach
            ref: !ref {path: "../../../parameters"}
              
    - name: StatPrint
      kind: ActorNode
      nodes:
        - name: stats
          kind: KernelNode
          extern: !include 
            file: probes_c.dfc
            begin: "// v print_stats"
            end: "// ^ print_stats"
          ports:
            - {name: samples, dir: in}
              
      
  edges:
    - connect: [".", "flush", "Flush/flush", "flush"]
    - connect: [".", "samples", "StatPrint/stats", "samples"]
    # TODO: connections to flush defined by the caller


