#define ID_NR_MAX 50

// #define NUM_ELEMS(a) (sizeof(a)/sizeof(0[a]))

union {
  float f;
  uint32_t i;
} t;
int cnt = {{ getter("predef_data.data.LEN") }};// NUM_ELEMS({{label.predef_data.name}}.data);
if (! {{label.inited.name}}) {
  for (int i = 0; i < cnt; ++i) {
    t.f =       ((float)i)+ 0.1335f; {{ setter("predef_data.data.a", "i", "t.i") }};
    t.f = 1.50f*((float)i)+ 0.9383f; {{ setter("predef_data.data.b", "i", "t.i") }};
    t.f = 0.33f*((float)i)+ 0.1172f; {{ setter("predef_data.data.c", "i", "t.i") }};
  }
  {{label.inited.name}} = true;
 }

int current_id = rand() % ID_NR_MAX;

#ifdef DFL_DEBUG_PRINT
printf("<#compute#>(Src_compute): id=%d\n", current_id);
printf("data:\n");
for (int i = 0; i < cnt && i < 10; ++i) {
  t.i = {{ getter("predef_data.data.a", "i") }};
  printf("%f ", t.f);
 }
printf("\n");
for (int i = 0; i < cnt && i < 10; ++i) {
  t.i = {{ getter("predef_data.data.b", "i") }};
  printf("%f ", t.f);
 }
printf("\n");
for (int i = 0; i < cnt && i < 10; ++i) {
  t.i = {{ getter("predef_data.data.c", "i") }};
  printf("%f ", t.f);
 }
printf("\n");
#endif

{{ setter("data.id", "current_id") }};
for (int i = 0; i < cnt; ++i) {
  {{ setter("data.data.a", "i", getter("predef_data.data.a", "i")) }};
  {{ setter("data.data.b", "i", getter("predef_data.data.b", "i")) }};
  {{ setter("data.data.c", "i", getter("predef_data.data.c", "i")) }};
 }
{{ setter("data.data.LEN", "cnt") }};
#ifdef DFL_DEBUG_PRINT
printf("<#compute#>(Src_compute): length=%"PRId32"\n", (int32_t){{ getter("data.data.LEN") }});
#endif
