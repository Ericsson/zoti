// v counter_inject
++{{ label.cnt_buff.name }}.cnt;
// ^ counter_inject


// v flush_one_buffer
(*{{ label.cnt_stat.name }}).arr[0].name = {{ label.cnt_buff.name }}.name;
(*{{ label.cnt_stat.name }}).arr[0].cnt = {{ label.cnt_buff.name }}.cnt;
(*{{ label.cnt_stat.name }}).len = 1;
// ^ flush_one_buffer


// v flush_n_buffer
{% for buff in param.buffers %}
(*{{ label.cnt_stat.name }}).arr[{{loop.index0}}].name = {{ label[buff].name }}.name;
(*{{ label.cnt_stat.name }}).arr[{{loop.index0}}].cnt = {{ label[buff].name }}.cnt;
{% endfor %}
(*{{ label.cnt_stat.name }}).len = {{ param.buffers|length }};
// ^ flush_n_buffer

// v send_flush_n
{% for port in param.flush_ports %}
(*{{ port.name }}) = (*((bool *)&{{ label.flush.name }}));
{% endfor %}
// ^ send_flush_n

// v print_stats
printf("%-30s %s\n", "Counter", "Value");
for (int i = 0; i < {{ getter("samples.LEN") }}; ++i) {
  /* TODO: Accessing the dynamic atom table of the framework like this is
     a hack. The framework should have some proper interface for this,
     preferrably using dataflow mechanisms if reasonable. */
  DFL_atom_t id = {{ getter("samples.name", "i") }};
  int a = 0;
  while (a < DFL_dyn_atom_table_len && DFL_dyn_atom_table[a].id_nr }} != id)
    ++a;
  if (a >= DFL_dyn_atom_table_len)
    printf("%-30"PRIu32" %10"PRIu64"\n", {{ getter("samples.name", "i") }},
	   {{ getter("samples.cnt", "i") }});
  else
    printf("%-30s %10"PRIu64"\n", DFL_dyn_atom_table[a].name,
	   {{ getter("samples.cnt", "i") }}(i));
 }
// ^ print_stats
